#!/usr/bin/env python
from sys import stderr, exit
import fileinput

class Accumulator:
    def __init__(self, compact=False):
        self.sums = {}
        self.sums[1] = 0.0
        self.sums[2] = 0.0
        self.sums[3] = 0.0
        self.sums[4] = 0.0
        self.min = None
        self.max = None
        self.N = 0
        self.compact = compact
        if compact:
            self.xs = None
        else:
            self.xs = []

    def push_array(self, xs):
        for x in xs: self.push(x)

    def push(self, x):
        self.N += 1
        if not self.compact:
            self.xs.append(x)

        if self.min == None:
            self.min = x
        elif x < self.min:
            self.min = x

        if self.max == None:
            self.max = x
        elif x > self.max:
            self.max = x

        for i in xrange(1,5):
            self.sums[i] += x**float(i)

    def mean(self):
        return self.sums[1]/self.N

    def sem(self):
        return self.stddev()/(self.N**0.5)

    def stddev(self):
        return self.var()**0.5

    def var(self):
        var = self.sums[2]/self.N
        var -= self.mean()**2.0
        return var

    def moment(self, m):
        if m == 3:
            r  = self.sums[3]/self.N 
            r -= 3*self.mean()*self.sums[2]/self.N
            r += 2*self.mean()**3
        elif m == 4:
            r  = self.sums[4]/self.N
            r -= 4*self.mean()*self.sums[3]/self.N
            r += 6*self.mean()**2*self.sums[2]/self.N
            r -= 3*self.mean()**4

        return r

    def cumulant(self, m):
        if m == 3:
            r  = self.sums[3]/self.N 
            r -= 3*self.mean()*self.sums[2]/self.N
            r += 2*self.mean()**3
        elif m == 4:
            r  = self.sums[4]/self.N
            r -= 4*self.mean()*self.sums[3]/self.N
            r -= 3*(self.sums[2]/self.N)**2
            r += 12*self.sums[2]/self.N*self.mean()**2
            r -= 6*self.mean()**4

        return r

    def describe_short(self):
        print 'min: %.3f' % self.min,
        print 'max: %.3f' % self.max,
        print 'avg: %.3f' % self.mean(),
        print 'var: %.5f' % self.var(),
        print 'c3: %.3e' % self.cumulant(3),
        print 'c4: %.3e' % self.cumulant(4),
        print

    def describe(self):
        print 'min:          %f' % self.min
        print 'max:          %f' % self.max
        print 'mean:         %f' % self.mean()
        print 'variance:     %f' % self.var()
        print '3rd cumulant: %f' % self.cumulant(3)
        print '4th cumulant: %f' % self.cumulant(4)

def stats(args):
    acc = Accumulator()
    for line in fileinput.input(args.files):
        fields = line.split()
        if len(fields) < args.field:
            stderr.write('error: %s line %i: has fewer than %i fields\n' %
                    (fileinput.filename(),fileinput.lineno(),args.field))
            exit(1)

        x = fields[args.field-1]
        try:
            x = float(x)
        except:
            stderr.write('warning: %s line %i: "%s" is not a valid number\n' 
                    % (fileinput.filename(),fileinput.lineno(),x)) 
            continue
        if args.min <= x <= args.max:
            acc.push(x)
        if args.every > 0 and acc.N%args.every == 0 and acc.N > 0:
            print 'N: %i' % acc.N,
            acc.describe_short()

    if acc.N != 0:
        acc.describe()

def main():
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('-m', '--min', type=float, 
            help='minimum value to consider', default=float("-inf"))
    parser.add_argument('-n', '--max', type=float, 
            help='maximum value to consider', default=float("inf"))
    parser.add_argument('-f', '--field', type=int, 
            help='which field to consider', default=1)
    parser.add_argument('-s', '--seperator', type=str,
            help='field seperator character (default: white space)')
    parser.add_argument('-e','--every', metavar='N', default=0, type=int,
            help='print estimate every N values')


    parser.add_argument('files', metavar='FILES', nargs='*')

    args = parser.parse_args()

    stats(args)


if __name__ == '__main__':
    main()
